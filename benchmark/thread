#!/usr/bin/env node
'use strict';

const Buffer = require('buffer').Buffer;
const WBuf = require('wbuf');

const hackchain = require('../');

const Interpreter = hackchain.Interpreter;

function run(name, count, body) {
  const asm = new Interpreter.Assembler();

  body(asm);

  const buf = new WBuf();
  asm.render(buf);
  const code = Buffer.concat(buf.render());

  const memory = Buffer.alloc(0x20000);
  code.copy(memory);

  const thread = new Interpreter.Thread(memory, 0);

  const COUNT = count;

  const start = +new Date;
  for (let i = 0; i < COUNT; i++)
    thread.runOne();
  const end = +new Date;

  console.log('name: %j ops/sec: %d', name, COUNT / (end - start) * 1000);
}

run('hlt', 1e7, (asm) => {
  asm.jalr('r0', 'r0');
});

run('sw', 1e7, (asm) => {
  asm.movi('r1', 0x2000);
  asm.sw('r1', 'r1', 0);
  asm.beq('r0', 'r0', -2);
});

run('lw', 1e7, (asm) => {
  asm.movi('r1', 0x2000);
  asm.lw('r1', 'r1', 0);
  asm.beq('r0', 'r0', -2);
});
